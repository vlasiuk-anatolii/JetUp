{"version":3,"sources":["store/actions.ts","store/index.ts","store/selectors.ts","components/MainPage/MainPage.tsx","components/AddWordPage/AddWordPage.tsx","components/RepeatPage/RepeatPage.tsx","components/RepeatPage/UnitPage/UnitPage.tsx","components/ResultPage/HendlerResults/HendlerResults.tsx","components/ResultPage/ResultPage.tsx","components/PageNotFound/PageNotFound.tsx","App.tsx","index.tsx"],"names":["ActionType","initialState","currentVocabulary","rows","currentTenWords","containerAnswers","store","createStore","state","action","type","SET_NEW_WORD","payload","SET_TEN_WORDS","SET_SESSION_ANSWERS","getCurrentVocabularySelector","getCurrentTenWordsSelector","getAllAnswersSelector","columns","field","headerName","width","description","sortable","valueGetter","params","row","word","translate","MainPage","navigate","useNavigate","useSelector","className","style","height","margin","DataGrid","pageSize","rowsPerPageOptions","checkboxSelection","Box","sx","display","Fab","m","color","aria-label","onClick","AddWordPage","dispatch","useDispatch","React","setWord","setTranslate","errorMessage","setErrorMessage","error","setError","isSuccess","setIsSuccess","handlerForm","isExist","some","element","length","id","AddHome","Stack","spacing","Alert","severity","component","justifyContent","onSubmit","TextField","required","label","placeholder","helperText","inputProps","maxLength","value","onChange","event","target","direction","Button","variant","randomChoose","array","howMany","testWords","tempWord","Math","trunc","random","item","push","RepeatPage","prepareData","UnitPage","unitId","useParams","tenWords","currentUnit","find","_","i","toString","getFour","filter","unshift","sort","a","b","localeCompare","answer","number","isRight","taskWord","yuorAnswer","sessionAnswer","setSessionAnswer","map","StyledTableCell","styled","TableCell","theme","tableCellClasses","head","backgroundColor","palette","common","black","white","body","fontSize","StyledTableRow","TableRow","hover","border","HandlerResults","lastAnswer","falseAnswer","TableContainer","Paper","Table","maxWidth","TableHead","align","TableBody","ResultPage","isShow","setIsShow","showThisSession","setShowThisSession","results","flexWrap","PageNotFound","App","path","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.fe36fc84.chunk.js","sourcesContent":["import { Answer, Word } from '../react-app-env.d';\n\n// eslint-disable-next-line no-shadow\nexport enum ActionType {\n  SET_NEW_WORD = 'SET_NEW_WORD',\n  SET_TEN_WORDS = 'SET_TEN_WORDS',\n  SET_SESSION_ANSWERS = 'SET_SESSION_ANSWERS',\n}\n\nexport interface SetNewWord {\n  type: ActionType.SET_NEW_WORD,\n  payload: Word,\n}\n\nexport interface SetTenWords {\n  type: ActionType.SET_TEN_WORDS,\n  payload: Word[],\n}\n\nexport interface SetSessionAnswers {\n  type: ActionType.SET_SESSION_ANSWERS,\n  payload: Answer[],\n}\n\n// Action creators - a function returning an action object\nexport const setNewWord = (payload: Word): SetNewWord => ({\n  type: ActionType.SET_NEW_WORD,\n  payload,\n});\n\nexport const setTenWords = (payload: Word[]): SetTenWords => ({\n  type: ActionType.SET_TEN_WORDS,\n  payload,\n});\n\nexport const setSessionAnswers = (payload: Answer[]): SetSessionAnswers => ({\n  type: ActionType.SET_SESSION_ANSWERS,\n  payload,\n});\n","import { legacy_createStore as createStore } from 'redux';\nimport rows from '../api/words.json';\n\nimport { RootState } from '../react-app-env.d';\n// // import { composeWithDevTools } from 'redux-devtools-extension';\nimport {\n  ActionType, SetNewWord, SetTenWords, SetSessionAnswers,\n} from './actions';\n\n// Initial state\nconst initialState: RootState = {\n  currentVocabulary: rows,\n  currentTenWords: [],\n  containerAnswers: [],\n};\n\n// // rootReducer - this function is called after dispatching an action\nconst rootReducer = (state = initialState, action:\nSetNewWord |\nSetTenWords |\nSetSessionAnswers) => {\n  switch (action.type) {\n    case ActionType.SET_NEW_WORD:\n      return {\n        ...state,\n        currentVocabulary: [...state.currentVocabulary, action.payload],\n      };\n\n    case ActionType.SET_TEN_WORDS:\n      return {\n        ...state,\n        currentTenWords: [...action.payload],\n      };\n\n    case ActionType.SET_SESSION_ANSWERS:\n      return {\n        ...state,\n        containerAnswers: [...state.containerAnswers, action.payload],\n      };\n\n    default:\n      return state;\n  }\n};\n\n// The `store` should be passed to the <Provider store={store}> in `/src/index.tsx`\nconst store = createStore(\n  rootReducer,\n);\n\nexport default store;\n","// // Selectors - a function receiving Redux state and returning some data from it\nimport { RootState } from '../react-app-env.d';\n\nexport const getCurrentVocabularySelector = (state: RootState) => state.currentVocabulary;\nexport const getCurrentTenWordsSelector = (state: RootState) => state.currentTenWords;\nexport const getAllAnswersSelector = (state: RootState) => state.containerAnswers;\n","import * as React from 'react';\nimport { DataGrid, GridColDef, GridValueGetterParams } from '@mui/x-data-grid';\nimport './MainPage.scss';\nimport { Box, Fab } from '@mui/material';\nimport AddIcon from '@mui/icons-material/Add';\nimport RepeatIcon from '@mui/icons-material/Repeat';\nimport { useNavigate } from 'react-router-dom';\nimport { useSelector } from 'react-redux';\nimport { getCurrentVocabularySelector } from '../../store/selectors';\n\nconst columns: GridColDef[] = [\n  { field: 'id', headerName: 'ID', width: 70 },\n  { field: 'word', headerName: 'Word', width: 130 },\n  { field: 'translate', headerName: 'Translate', width: 130 },\n  {\n    field: 'fullName',\n    headerName: 'Word -> Translate',\n    description: 'This column has a value getter and is not sortable.',\n    sortable: false,\n    width: 160,\n    valueGetter: (params: GridValueGetterParams) => `${params.row.word} -> ${params.row.translate}`,\n  },\n];\n\nexport const MainPage = () => {\n  const navigate = useNavigate();\n  const rows = useSelector(getCurrentVocabularySelector);\n\n  return (\n    <>\n      <h1 className=\"title\">Словник</h1>\n      <div style={{\n        height: 700,\n        width: 700,\n        margin: '0 auto',\n      }}\n      >\n        <DataGrid\n          rows={rows}\n          columns={columns}\n          pageSize={10}\n          rowsPerPageOptions={[10]}\n          checkboxSelection\n        />\n        <div className=\"box_button\">\n          <Box sx={{ display: 'flex' }}>\n            <h2 className=\"subtitle\">Додати слово</h2>\n            <Fab\n              sx={{ m: '10px' }}\n              color=\"primary\"\n              aria-label=\"add\"\n              onClick={() => {\n                navigate('/addword');\n              }}\n            >\n              <AddIcon />\n            </Fab>\n          </Box>\n          <Box sx={{ display: 'flex' }}>\n            <h2 className=\"subtitle\">Перевірити слова</h2>\n            <Fab\n              sx={{ m: '10px' }}\n              color=\"primary\"\n              aria-label=\"repeat\"\n              onClick={() => {\n                navigate('/repeat');\n              }}\n            >\n              <RepeatIcon />\n            </Fab>\n          </Box>\n        </div>\n      </div>\n    </>\n  );\n};\n","import {\n  Box, Button, Fab, Stack, TextField,\n} from '@mui/material';\nimport * as React from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { useNavigate } from 'react-router';\nimport { AddHome } from '@mui/icons-material';\nimport Alert from '@mui/material/Alert';\nimport { setNewWord } from '../../store/actions';\nimport { getCurrentVocabularySelector } from '../../store/selectors';\nimport './AddWordPage.scss';\n\nexport const AddWordPage = () => {\n  const rows = useSelector(getCurrentVocabularySelector);\n  const dispatch = useDispatch();\n  const navigate = useNavigate();\n\n  const [word, setWord] = React.useState('');\n  const [translate, setTranslate] = React.useState('');\n  const [errorMessage, setErrorMessage] = React.useState('');\n  const [error, setError] = React.useState(false);\n  const [isSuccess, setIsSuccess] = React.useState(false);\n  const handlerForm = () => {\n    const isExist = rows.some(element => element.word === word);\n\n    if (!translate.length) {\n      setError(true);\n      setIsSuccess(false);\n      setErrorMessage('You should add translate');\n    } else if (isExist) {\n      setError(true);\n      setIsSuccess(false);\n      setErrorMessage('Word is existing in the vocabulary');\n    } else {\n      dispatch(setNewWord({\n        id: rows.length + 1,\n        word,\n        translate,\n      }));\n\n      setIsSuccess(true);\n      setTranslate('');\n      setWord('');\n      setErrorMessage('');\n      setError(false);\n    }\n  };\n\n  return (\n    <>\n      <Box sx={{ '& > :not(style)': { m: 1 } }}>\n        <Fab\n          color=\"primary\"\n          aria-label=\"add\"\n          onClick={() => {\n            navigate('/');\n          }}\n        >\n          <AddHome />\n        </Fab>\n      </Box>\n      <h1 className=\"title\">Додати нове слово</h1>\n      {error && (\n        <Stack sx={{ width: '100%' }} spacing={2}>\n          <Alert severity=\"error\">Enter other word</Alert>\n        </Stack>\n      )}\n      {isSuccess && (\n        <Stack sx={{ width: '100%' }} spacing={2}>\n          <Alert severity=\"success\">The word has been added successfully</Alert>\n        </Stack>\n      )}\n      <Box\n        component=\"form\"\n        sx={{\n          display: 'flex',\n          justifyContent: 'center',\n          '& .MuiTextField-root': { m: 1, width: '400px' },\n        }}\n        onSubmit={handlerForm}\n      >\n        <TextField\n          required\n          id=\"outlined-required\"\n          label=\"New word\"\n          placeholder=\"New word\"\n          helperText={error ? errorMessage : ''}\n          inputProps={{ maxLength: 100 }}\n          value={word}\n          onChange={(event) => {\n            setWord(event.target.value);\n          }}\n        />\n        <TextField\n          required\n          id=\"outlined-required\"\n          label=\"Translate\"\n          placeholder=\"Translate\"\n          inputProps={{ maxLength: 100 }}\n          value={translate}\n          onChange={(event) => {\n            setTranslate(event.target.value);\n          }}\n        />\n      </Box>\n      <Stack spacing={2} direction=\"row\" sx={{ m: 1 }}>\n        <Button\n          sx={{ m: '0 auto' }}\n          variant=\"outlined\"\n          type=\"button\"\n          onClick={() => {\n            handlerForm();\n          }}\n        >\n          Add new word\n        </Button>\n      </Stack>\n    </>\n  );\n};\n","import * as React from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { AddHome } from '@mui/icons-material';\nimport { useNavigate } from 'react-router';\nimport {\n  Button, Stack, Fab, Box,\n} from '@mui/material';\nimport { getCurrentVocabularySelector } from '../../store/selectors';\nimport './RepeatPage.scss';\nimport { Word } from '../../react-app-env.d';\nimport { setTenWords } from '../../store/actions';\n// eslint-disable-next-line import/no-cycle\n// import { UnitPage } from './UnitPage';\n\nexport function randomChoose(array: Word[], howMany: number) {\n  const testWords: Word[] = [];\n\n  while (testWords.length < howMany) {\n    let isExist = false;\n    const tempWord = array[Math.trunc(Math.random() * array.length)];\n\n    if (tempWord) {\n      isExist = testWords.some(item => item.word === tempWord.word);\n    }\n\n    if (!isExist) {\n      testWords.push(tempWord);\n    }\n  }\n\n  return testWords;\n}\n\nexport const RepeatPage = () => {\n  const dispatch = useDispatch();\n  const rows = useSelector(getCurrentVocabularySelector);\n\n  function prepareData() {\n    const randomTen = randomChoose(rows, 10);\n\n    return randomTen;\n  }\n\n  dispatch(setTenWords(prepareData()));\n  const navigate = useNavigate();\n\n  return (\n    <>\n      <Box sx={{ '& > :not(style)': { m: 1 } }}>\n        <Fab\n          color=\"primary\"\n          aria-label=\"add\"\n          onClick={() => {\n            navigate('/');\n          }}\n        >\n          <AddHome />\n        </Fab>\n      </Box>\n      <h1 className=\"title\">Повторити слова</h1>\n      <h2>{}</h2>\n\n      <Stack spacing={2} direction=\"row\" sx={{ m: 1 }}>\n        <Button\n          sx={{ m: '0 auto' }}\n          variant=\"outlined\"\n          type=\"button\"\n          onClick={() => {\n            prepareData();\n            navigate('1');\n          }}\n        >\n          Розпочати повторення\n        </Button>\n      </Stack>\n    </>\n  );\n};\n","import * as React from 'react';\nimport { useParams, useNavigate } from 'react-router';\nimport { Stack } from '@mui/material';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { getCurrentTenWordsSelector } from '../../../store/selectors';\n\nimport './UnitPage.scss';\nimport { randomChoose } from '../RepeatPage';\nimport { Answer } from '../../../react-app-env.d';\nimport { setSessionAnswers } from '../../../store/actions';\n\nexport const UnitPage = () => {\n  const { unitId } = useParams<{ unitId: string }>();\n  const navigate = useNavigate();\n  const dispatch = useDispatch();\n  const tenWords = useSelector(getCurrentTenWordsSelector);\n  const currentUnit = tenWords.find((_, i) => `${i + 1}`.toString() === unitId);\n  const arrayWithoutCarrentUnit = tenWords.filter(item => item.word !== currentUnit?.word);\n  const getFour = randomChoose(arrayWithoutCarrentUnit, 3);\n\n  if (currentUnit) {\n    getFour.unshift(currentUnit);\n  }\n\n  getFour.sort((a, b) => a.translate.localeCompare(b.translate));\n\n  const answer: Answer = {\n    number: 0,\n    isRight: false,\n    taskWord: '',\n    yuorAnswer: '',\n  };\n\n  const [sessionAnswer, setSessionAnswer] = React.useState<Answer[]>([]);\n\n  React.useEffect(() => {\n    if (sessionAnswer.length === 10) {\n      dispatch(setSessionAnswers(sessionAnswer));\n      navigate('/result');\n    }\n  }, [sessionAnswer]);\n\n  return (\n    <>\n      <h1 className=\"title\">Повторення слів</h1>\n      <h3 className=\"what_todo\">\n        Обери правильний переклад слова:\n        {' '}\n        <span className=\"word\">\n          {' '}\n          {currentUnit ? currentUnit.word : ''}\n        </span>\n      </h3>\n      <Stack\n        spacing={2}\n        direction=\"row\"\n        sx={{\n          m: 1,\n          display: 'flex',\n          justifyContent: 'center',\n        }}\n      >\n        {currentUnit && getFour.map(item => (\n          <button\n            className=\"button\"\n            key={item.id}\n            type=\"button\"\n            onClick={() => {\n              if (item.translate === currentUnit.translate) {\n                answer.isRight = true;\n              }\n\n              if (unitId) {\n                answer.number = +unitId;\n              }\n\n              answer.taskWord = currentUnit.word;\n              answer.yuorAnswer = item.translate;\n              setSessionAnswer([...sessionAnswer, answer]);\n              if (unitId) {\n                navigate(`/repeat/${+unitId + 1}`);\n              }\n            }}\n          >\n            {item.translate}\n          </button>\n        ))}\n      </Stack>\n    </>\n  );\n};\n","import * as React from 'react';\nimport './HendlerResults.scss';\nimport { styled } from '@mui/material/styles';\nimport Table from '@mui/material/Table';\nimport { Alert, Stack } from '@mui/material';\nimport TableBody from '@mui/material/TableBody';\nimport TableCell, { tableCellClasses } from '@mui/material/TableCell';\nimport TableContainer from '@mui/material/TableContainer';\nimport TableHead from '@mui/material/TableHead';\nimport TableRow from '@mui/material/TableRow';\nimport Paper from '@mui/material/Paper';\n\nimport { Answer } from '../../../react-app-env.d';\n\nconst StyledTableCell = styled(TableCell)(({ theme }) => ({\n  [`&.${tableCellClasses.head}`]: {\n    backgroundColor: theme.palette.common.black,\n    color: theme.palette.common.white,\n  },\n  [`&.${tableCellClasses.body}`]: {\n    fontSize: 14,\n  },\n}));\n\nconst StyledTableRow = styled(TableRow)(({ theme }) => ({\n  '&:nth-of-type(odd)': {\n    backgroundColor: theme.palette.action.hover,\n  },\n  // hide last border\n  '&:last-child td, &:last-child th': {\n    border: 0,\n  },\n}));\n\ninterface Props {\n  lastAnswer: Answer[];\n}\n\nexport const HandlerResults: React.FC<Props> = ({ lastAnswer }) => {\n  const falseAnswer = lastAnswer.filter(item => !item.isRight);\n\n  return (\n    <>\n      <TableContainer component={Paper}>\n        <Table sx={{ maxWidth: 700, margin: '0 auto' }} aria-label=\"customized table\">\n          <TableHead>\n            <TableRow>\n              <StyledTableCell align=\"center\">№</StyledTableCell>\n              <StyledTableCell align=\"center\">Правильно/хибно</StyledTableCell>\n              <StyledTableCell align=\"center\">Слово </StyledTableCell>\n              <StyledTableCell align=\"center\">Твоя відповідь</StyledTableCell>\n            </TableRow>\n          </TableHead>\n          <TableBody>\n            {lastAnswer.map((item) => (\n              <StyledTableRow key={item.number}>\n                <StyledTableCell align=\"center\">{item.number}</StyledTableCell>\n                <StyledTableCell align=\"center\">{`${item.isRight}`}</StyledTableCell>\n                <StyledTableCell align=\"center\">{item.taskWord}</StyledTableCell>\n                <StyledTableCell align=\"center\">{item.yuorAnswer}</StyledTableCell>\n              </StyledTableRow>\n            ))}\n          </TableBody>\n        </Table>\n      </TableContainer>\n      <Stack sx={{ width: '100%' }} spacing={2}>\n        <Alert severity=\"error\">\n          {' '}\n          {`Відсоток хибних відповідей: ${(Math.trunc(((falseAnswer.length / 10) * 100) * 100)) / 100}%`}\n          {' '}\n        </Alert>\n        <Alert severity=\"success\">\n          {' '}\n          {`Відсоток вірних відповідей: ${(Math.trunc((((10 - falseAnswer.length) / 10) * 100) * 100)) / 100}%`}\n          {' '}\n        </Alert>\n      </Stack>\n    </>\n  );\n};\n","import * as React from 'react';\nimport { useSelector } from 'react-redux';\nimport {\n  Alert, Box, Button, Fab, Stack,\n} from '@mui/material';\nimport { useNavigate } from 'react-router';\nimport { AddHome } from '@mui/icons-material';\nimport RepeatIcon from '@mui/icons-material/Repeat';\nimport './ResultPage.scss';\nimport { getAllAnswersSelector } from '../../store/selectors';\nimport { HandlerResults } from './HendlerResults';\nimport { Answer } from '../../react-app-env.d';\n\nexport const ResultPage = () => {\n  const [isShow, setIsShow] = React.useState(false);\n  const [showThisSession, setShowThisSession] = React.useState<Answer[]>([]);\n\n  const navigate = useNavigate();\n  const results = useSelector(getAllAnswersSelector);\n  const lastAnswer = results[results.length - 1];\n\n  return (\n    <>\n      <Box sx={{ '& > :not(style)': { m: 1 } }}>\n        <Fab\n          color=\"primary\"\n          aria-label=\"add\"\n          onClick={() => {\n            navigate('/');\n          }}\n        >\n          <AddHome />\n        </Fab>\n      </Box>\n      <h1 className=\"title\">Результати</h1>\n\n      <HandlerResults\n        lastAnswer={lastAnswer}\n      />\n      <Stack sx={{ width: '100%' }} spacing={2}>\n        <Alert severity=\"info\">{`Активність: Сьогодні здіснено ${results.length} повторень слів`}</Alert>\n      </Stack>\n      <Box sx={{ '& > :not(style)': { m: 1 } }}>\n        <Fab\n          color=\"primary\"\n          aria-label=\"add\"\n          onClick={() => {\n            navigate('/');\n          }}\n        >\n          <AddHome />\n        </Fab>\n        <Fab\n          color=\"primary\"\n          aria-label=\"repeat\"\n          onClick={() => {\n            navigate('/repeat');\n          }}\n        >\n          <RepeatIcon />\n        </Fab>\n      </Box>\n      <Stack\n        spacing={2}\n        direction=\"row\"\n        sx={{\n          margin: 1,\n          display: 'flex',\n          flexWrap: 'wrap',\n        }}\n      >\n        {results.map((item, i) => (\n\n          <Button\n            variant=\"outlined\"\n            type=\"button\"\n            // eslint-disable-next-line react/no-array-index-key\n            key={i} // з масивом нема ніяких маніпуляцій, тому індекси будуть унікальні\n            onClick={() => {\n              setIsShow(true);\n              setShowThisSession(item);\n            }}\n          >\n            {`Повторення ${i + 1}`}\n          </Button>\n        ))}\n      </Stack>\n      {isShow && <HandlerResults lastAnswer={showThisSession} />}\n    </>\n  );\n};\n","import * as React from 'react';\n\nexport const PageNotFound = () => {\n  return (\n    <>\n      <h1 className=\"title\">Сторінки нема</h1>\n    </>\n  );\n};\n","import React from 'react';\nimport { Route, Routes } from 'react-router';\nimport './App.scss';\nimport { MainPage } from './components/MainPage';\nimport { AddWordPage } from './components/AddWordPage';\nimport { RepeatPage } from './components/RepeatPage';\nimport { UnitPage } from './components/RepeatPage/UnitPage';\nimport { ResultPage } from './components/ResultPage';\nimport { PageNotFound } from './components/PageNotFound';\n\nexport const App:React.FC = () => (\n  <div className=\"App\">\n    <Routes>\n      <Route path=\"/\" element={<MainPage />} />\n      <Route path=\"addword\" element={<AddWordPage />} />\n      <Route path=\"repeat\" element={<RepeatPage />} />\n      <Route path=\"repeat/:unitId\" element={<UnitPage />} />\n      <Route path=\"/result\" element={<ResultPage />} />\n      <Route path=\"*\" element={<PageNotFound />} />\n    </Routes>\n  </div>\n);\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport { Provider } from 'react-redux';\nimport { HashRouter } from 'react-router-dom';\nimport store from './store';\nimport { App } from './App';\n\nReactDOM.render(\n  <Provider store={store}>\n    <HashRouter>\n      <App />\n    </HashRouter>\n    ,\n  </Provider>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}