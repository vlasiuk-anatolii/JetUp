{"version":3,"sources":["store/actions.ts","store/index.ts","store/selectors.ts","components/MainPage/MainPage.tsx","components/AddWordPage/AddWordPage.tsx","components/RepeatPage/RepeatPage.tsx","components/RepeatPage/UnitPage/UnitPage.tsx","components/ResultPage/HendlerResults/HendlerResults.tsx","components/ResultPage/ResultPage.tsx","App.tsx","index.tsx"],"names":["ActionType","initialState","currentVocabulary","rows","currentTenWords","containerAnswers","store","createStore","state","action","type","SET_NEW_WORD","payload","SET_TEN_WORDS","SET_SESSION_ANSWERS","getCurrentVocabularySelector","getCurrentTenWordsSelector","getAllAnswersSelector","columns","field","headerName","width","description","sortable","valueGetter","params","row","word","translate","MainPage","navigate","useNavigate","useSelector","style","height","DataGrid","pageSize","rowsPerPageOptions","checkboxSelection","Box","sx","m","Fab","color","aria-label","onClick","AddWordPage","dispatch","useDispatch","React","setWord","setTranslate","errorMessage","setErrorMessage","error","setError","isSuccess","setIsSuccess","handlerForm","isExist","some","element","length","id","console","log","Stack","spacing","Alert","severity","component","onSubmit","TextField","required","label","placeholder","helperText","inputProps","maxLength","value","onChange","event","target","direction","Button","variant","randomChoose","array","howMany","testWords","tempWord","Math","trunc","random","item","push","RepeatPage","prepareData","UnitPage","unitId","useParams","tenWords","currentUnit","find","_","i","toString","getFour","filter","unshift","sort","a","b","localeCompare","answer","number","isRight","taskWord","yuorAnswer","sessionAnswer","setSessionAnswer","map","StyledTableCell","styled","TableCell","theme","tableCellClasses","head","backgroundColor","palette","common","black","white","body","fontSize","StyledTableRow","TableRow","hover","border","HandlerResults","lastAnswer","falseAnswer","TableContainer","Paper","Table","minWidth","TableHead","align","TableBody","ResultPage","isShow","setIsShow","showThisSession","setShowThisSession","results","AddHome","App","className","path","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.a5cade07.chunk.js","sourcesContent":["import { Answer, Word } from '../react-app-env.d';\n\n// eslint-disable-next-line no-shadow\nexport enum ActionType {\n  SET_NEW_WORD = 'SET_NEW_WORD',\n  SET_TEN_WORDS = 'SET_TEN_WORDS',\n  SET_SESSION_ANSWERS = 'SET_SESSION_ANSWERS',\n}\n\nexport interface SetNewWord {\n  type: ActionType.SET_NEW_WORD,\n  payload: Word,\n}\n\nexport interface SetTenWords {\n  type: ActionType.SET_TEN_WORDS,\n  payload: Word[],\n}\n\nexport interface SetSessionAnswers {\n  type: ActionType.SET_SESSION_ANSWERS,\n  payload: Answer[],\n}\n\n// Action creators - a function returning an action object\nexport const setNewWord = (payload: Word): SetNewWord => ({\n  type: ActionType.SET_NEW_WORD,\n  payload,\n});\n\nexport const setTenWords = (payload: Word[]): SetTenWords => ({\n  type: ActionType.SET_TEN_WORDS,\n  payload,\n});\n\nexport const setSessionAnswers = (payload: Answer[]): SetSessionAnswers => ({\n  type: ActionType.SET_SESSION_ANSWERS,\n  payload,\n});\n","import { legacy_createStore as createStore } from 'redux';\nimport rows from '../api/words.json';\n\nimport { RootState } from '../react-app-env.d';\n// // import { composeWithDevTools } from 'redux-devtools-extension';\nimport {\n  ActionType, SetNewWord, SetTenWords, SetSessionAnswers,\n} from './actions';\n\n// Initial state\nconst initialState: RootState = {\n  currentVocabulary: rows,\n  currentTenWords: [],\n  containerAnswers: [],\n};\n\n// // rootReducer - this function is called after dispatching an action\nconst rootReducer = (state = initialState, action:\nSetNewWord |\nSetTenWords |\nSetSessionAnswers) => {\n  switch (action.type) {\n    case ActionType.SET_NEW_WORD:\n      return {\n        ...state,\n        currentVocabulary: [...state.currentVocabulary, action.payload],\n      };\n\n    case ActionType.SET_TEN_WORDS:\n      return {\n        ...state,\n        currentTenWords: [...action.payload],\n      };\n\n    case ActionType.SET_SESSION_ANSWERS:\n      return {\n        ...state,\n        containerAnswers: [...state.containerAnswers, action.payload],\n      };\n\n    default:\n      return state;\n  }\n};\n\n// The `store` should be passed to the <Provider store={store}> in `/src/index.tsx`\nconst store = createStore(\n  rootReducer,\n);\n\nexport default store;\n","// // Selectors - a function receiving Redux state and returning some data from it\nimport { RootState } from '../react-app-env.d';\n\nexport const getCurrentVocabularySelector = (state: RootState) => state.currentVocabulary;\nexport const getCurrentTenWordsSelector = (state: RootState) => state.currentTenWords;\nexport const getAllAnswersSelector = (state: RootState) => state.containerAnswers;\n","import * as React from 'react';\nimport { DataGrid, GridColDef, GridValueGetterParams } from '@mui/x-data-grid';\nimport './MainPage.scss';\nimport { Box, Fab } from '@mui/material';\nimport AddIcon from '@mui/icons-material/Add';\nimport RepeatIcon from '@mui/icons-material/Repeat';\nimport { useNavigate } from 'react-router-dom';\nimport { useSelector } from 'react-redux';\nimport { getCurrentVocabularySelector } from '../../store/selectors';\n\nconst columns: GridColDef[] = [\n  { field: 'id', headerName: 'ID', width: 70 },\n  { field: 'word', headerName: 'Word', width: 130 },\n  { field: 'translate', headerName: 'Translate', width: 130 },\n  {\n    field: 'fullName',\n    headerName: 'Word -> Translate',\n    description: 'This column has a value getter and is not sortable.',\n    sortable: false,\n    width: 160,\n    valueGetter: (params: GridValueGetterParams) => `${params.row.word} -> ${params.row.translate}`,\n  },\n];\n\nexport const MainPage = () => {\n  const navigate = useNavigate();\n  const rows = useSelector(getCurrentVocabularySelector);\n\n  return (\n    <>\n      <h1>Словник</h1>\n      <div style={{ height: 700, width: '100%' }}>\n        <DataGrid\n          rows={rows}\n          columns={columns}\n          pageSize={10}\n          rowsPerPageOptions={[5]}\n          checkboxSelection\n        />\n        <Box sx={{ '& > :not(style)': { m: 1 } }}>\n          <Fab\n            color=\"primary\"\n            aria-label=\"add\"\n            onClick={() => {\n              navigate('/addword');\n            }}\n          >\n            <AddIcon />\n          </Fab>\n          <Fab\n            color=\"primary\"\n            aria-label=\"repeat\"\n            onClick={() => {\n              navigate('/repeat');\n            }}\n          >\n            <RepeatIcon />\n          </Fab>\n        </Box>\n      </div>\n    </>\n  );\n};\n","import {\n  Box, Button, Stack, TextField,\n} from '@mui/material';\nimport * as React from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport Alert from '@mui/material/Alert';\nimport { setNewWord } from '../../store/actions';\nimport { getCurrentVocabularySelector } from '../../store/selectors';\nimport './AddWordPage.scss';\n\nexport const AddWordPage = () => {\n  const rows = useSelector(getCurrentVocabularySelector);\n  const dispatch = useDispatch();\n\n  const [word, setWord] = React.useState('');\n  const [translate, setTranslate] = React.useState('');\n  const [errorMessage, setErrorMessage] = React.useState('');\n  const [error, setError] = React.useState(false);\n  const [isSuccess, setIsSuccess] = React.useState(false);\n  const handlerForm = () => {\n    const isExist = rows.some(element => element.word === word);\n\n    if (!translate.length) {\n      setError(true);\n      setIsSuccess(false);\n      setErrorMessage('You should add translate');\n    } else if (isExist) {\n      setError(true);\n      setIsSuccess(false);\n      setErrorMessage('Word is existing in the vocabulary');\n    } else {\n      dispatch(setNewWord({\n        id: rows.length + 1,\n        word,\n        translate,\n      }));\n\n      setIsSuccess(true);\n      setTranslate('');\n      setWord('');\n      setErrorMessage('');\n      setError(false);\n    }\n  };\n\n  // eslint-disable-next-line no-console\n  console.log(rows);\n\n  return (\n    <>\n      <h1>Додати нове слово</h1>\n      {error && (\n        <Stack sx={{ width: '100%' }} spacing={2}>\n          <Alert severity=\"error\">Enter another word</Alert>\n        </Stack>\n      )}\n      {isSuccess && (\n        <Stack sx={{ width: '100%' }} spacing={2}>\n          <Alert severity=\"success\">The word has been added successfully</Alert>\n        </Stack>\n      )}\n      <Box\n        component=\"form\"\n        sx={{\n          '& .MuiTextField-root': { m: 1, width: '400px' },\n        }}\n        onSubmit={handlerForm}\n      >\n        <TextField\n          required\n          id=\"outlined-required\"\n          label=\"New word\"\n          placeholder=\"New word\"\n          helperText={error ? errorMessage : ''}\n          inputProps={{ maxLength: 100 }}\n          value={word}\n          onChange={(event) => {\n            setWord(event.target.value);\n          }}\n        />\n        <TextField\n          // error={isErrorLastName}\n          required\n          id=\"outlined-required\"\n          label=\"Translate\"\n          placeholder=\"Translate\"\n          // helperText={isErrorLastName ? 'Use only a-zA-Z' : ''}\n          inputProps={{ maxLength: 100 }}\n          value={translate}\n          onChange={(event) => {\n            setTranslate(event.target.value);\n          }}\n        />\n        <Stack spacing={2} direction=\"row\" sx={{ m: 1 }}>\n          <Button\n            variant=\"outlined\"\n            type=\"button\"\n            onClick={() => {\n              handlerForm();\n            }}\n          >\n            Add new word\n          </Button>\n        </Stack>\n\n      </Box>\n    </>\n  );\n};\n","import * as React from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { useNavigate } from 'react-router';\nimport { Button, Stack } from '@mui/material';\nimport { getCurrentVocabularySelector } from '../../store/selectors';\nimport './RepeatPage.scss';\nimport { Word } from '../../react-app-env.d';\nimport { setTenWords } from '../../store/actions';\n// eslint-disable-next-line import/no-cycle\n// import { UnitPage } from './UnitPage';\n\nexport function randomChoose(array: Word[], howMany: number) {\n  const testWords: Word[] = [];\n\n  while (testWords.length < howMany) {\n    let isExist = false;\n    const tempWord = array[Math.trunc(Math.random() * array.length)];\n\n    if (tempWord) {\n      isExist = testWords.some(item => item.word === tempWord.word);\n    }\n\n    if (!isExist) {\n      testWords.push(tempWord);\n    }\n  }\n\n  return testWords;\n}\n\nexport const RepeatPage = () => {\n  const dispatch = useDispatch();\n  const rows = useSelector(getCurrentVocabularySelector);\n\n  function prepareData() {\n    const randomTen = randomChoose(rows, 10);\n\n    return randomTen;\n  }\n\n  dispatch(setTenWords(prepareData()));\n  const navigate = useNavigate();\n  // eslint-disable-next-line no-console\n  // console.log(pageId);\n\n  // const [translate, setTranslate] = React.useState('');\n  // const [errorMessage, setErrorMessage] = React.useState('');\n  // const [error, setError] = React.useState(false);\n  // const [isSuccess, setIsSuccess] = React.useState(false);\n  return (\n    <>\n      <h1>Повторити слова</h1>\n      <h2>{}</h2>\n\n      <Stack spacing={2} direction=\"row\" sx={{ m: 1 }}>\n        <Button\n          variant=\"outlined\"\n          type=\"button\"\n          onClick={() => {\n            prepareData();\n            navigate('1');\n          }}\n        >\n          Розпочати повторення\n        </Button>\n      </Stack>\n    </>\n  );\n};\n","import * as React from 'react';\nimport { useParams, useNavigate } from 'react-router';\nimport { Button, Stack } from '@mui/material';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { getCurrentTenWordsSelector } from '../../../store/selectors';\n\nimport './UnitPage.scss';\nimport { randomChoose } from '../RepeatPage';\nimport { Answer } from '../../../react-app-env.d';\nimport { setSessionAnswers } from '../../../store/actions';\n\nexport const UnitPage = () => {\n  const { unitId } = useParams<{ unitId: string }>();\n  const navigate = useNavigate();\n  const dispatch = useDispatch();\n  const tenWords = useSelector(getCurrentTenWordsSelector);\n  const currentUnit = tenWords.find((_, i) => `${i + 1}`.toString() === unitId);\n  const arrayWithoutCarrentUnit = tenWords.filter(item => item.word !== currentUnit?.word);\n  const getFour = randomChoose(arrayWithoutCarrentUnit, 3);\n\n  if (currentUnit) {\n    getFour.unshift(currentUnit);\n  }\n\n  getFour.sort((a, b) => a.translate.localeCompare(b.translate));\n  // eslint-disable-next-line no-console\n  // console.log(unitId);\n  const answer: Answer = {\n    number: 0,\n    isRight: false,\n    taskWord: '',\n    yuorAnswer: '',\n  };\n\n  const [sessionAnswer, setSessionAnswer] = React.useState<Answer[]>([]);\n\n  // eslint-disable-next-line no-console\n  console.log(sessionAnswer.length);\n\n  if (sessionAnswer.length === 10) {\n    dispatch(setSessionAnswers(sessionAnswer));\n    navigate('/result');\n  }\n\n  // const [translate, setTranslate] = React.useState('');\n  // const [errorMessage, setErrorMessage] = React.useState('');\n  // const [error, setError] = React.useState(false);\n  // const [isSuccess, setIsSuccess] = React.useState(false);\n  // eslint-disable-next-line no-console\n\n  return (\n    <>\n      <h1>Повторення слів</h1>\n      <h2>{currentUnit ? currentUnit.word : ''}</h2>\n      <Stack spacing={2} direction=\"row\" sx={{ m: 1 }}>\n        {currentUnit && getFour.map(item => (\n          <Button\n            variant=\"outlined\"\n            key={item.id}\n            type=\"button\"\n            onClick={() => {\n              if (item.translate === currentUnit.translate) {\n                answer.isRight = true;\n              }\n\n              if (unitId) {\n                answer.number = +unitId;\n              }\n\n              setSessionAnswer([...sessionAnswer, answer]);\n              answer.taskWord = currentUnit.word;\n              answer.yuorAnswer = item.translate;\n              if (unitId) {\n                // eslint-disable-next-line no-console\n                console.log('if', sessionAnswer.length);\n                navigate(`/repeat/${+unitId + 1}`);\n              }\n            }}\n          >\n            {item.translate}\n          </Button>\n\n        ))}\n      </Stack>\n    </>\n  );\n};\n","import * as React from 'react';\n// import { DataGrid, GridColDef, GridValueGetterParams } from '@mui/x-data-grid';\nimport './HendlerResults.scss';\n// import { Box, Fab } from '@mui/material';\n// import AddIcon from '@mui/icons-material/Add';\n// import RepeatIcon from '@mui/icons-material/Repeat';\n// import { useNavigate } from 'react-router-dom';\n// import { useSelector } from 'react-redux';\n\nimport { styled } from '@mui/material/styles';\nimport Table from '@mui/material/Table';\nimport { Alert, Stack } from '@mui/material';\nimport TableBody from '@mui/material/TableBody';\nimport TableCell, { tableCellClasses } from '@mui/material/TableCell';\nimport TableContainer from '@mui/material/TableContainer';\nimport TableHead from '@mui/material/TableHead';\nimport TableRow from '@mui/material/TableRow';\nimport Paper from '@mui/material/Paper';\n\nimport { Answer } from '../../../react-app-env.d';\n\nconst StyledTableCell = styled(TableCell)(({ theme }) => ({\n  [`&.${tableCellClasses.head}`]: {\n    backgroundColor: theme.palette.common.black,\n    color: theme.palette.common.white,\n  },\n  [`&.${tableCellClasses.body}`]: {\n    fontSize: 14,\n  },\n}));\n\nconst StyledTableRow = styled(TableRow)(({ theme }) => ({\n  '&:nth-of-type(odd)': {\n    backgroundColor: theme.palette.action.hover,\n  },\n  // hide last border\n  '&:last-child td, &:last-child th': {\n    border: 0,\n  },\n}));\n\ninterface Props {\n  lastAnswer: Answer[];\n}\n\nexport const HandlerResults: React.FC<Props> = ({ lastAnswer }) => {\n  const falseAnswer = lastAnswer.filter(item => !item.isRight);\n\n  return (\n    <>\n      <TableContainer component={Paper}>\n        <Table sx={{ minWidth: 700 }} aria-label=\"customized table\">\n          <TableHead>\n            <TableRow>\n              <StyledTableCell>Номер завдання</StyledTableCell>\n              <StyledTableCell align=\"right\">Правильна відповідь чи хибна</StyledTableCell>\n              <StyledTableCell align=\"right\">Слово для перекладу</StyledTableCell>\n              <StyledTableCell align=\"right\">Твоя відповідь</StyledTableCell>\n            </TableRow>\n          </TableHead>\n          <TableBody>\n            {lastAnswer.map((item) => (\n              <StyledTableRow key={item.number}>\n                <StyledTableCell align=\"right\">{item.number}</StyledTableCell>\n                <StyledTableCell align=\"right\">{`${item.isRight}`}</StyledTableCell>\n                <StyledTableCell align=\"right\">{item.taskWord}</StyledTableCell>\n                <StyledTableCell align=\"right\">{item.yuorAnswer}</StyledTableCell>\n              </StyledTableRow>\n            ))}\n          </TableBody>\n        </Table>\n      </TableContainer>\n      <Stack sx={{ width: '100%' }} spacing={2}>\n        <Alert severity=\"error\">\n          {' '}\n          {`Відсоток хибних відповідей: ${(Math.trunc(((falseAnswer.length / 10) * 100) * 100)) / 100}%`}\n          {' '}\n        </Alert>\n        <Alert severity=\"success\">\n          {' '}\n          {`Відсоток вірних відповідей: ${(Math.trunc((((10 - falseAnswer.length) / 10) * 100) * 100)) / 100}%`}\n          {' '}\n        </Alert>\n      </Stack>\n    </>\n  );\n};\n","import * as React from 'react';\nimport { useSelector } from 'react-redux';\nimport {\n  Alert, Box, Button, Fab, Stack,\n} from '@mui/material';\nimport { useNavigate } from 'react-router';\nimport { AddHome } from '@mui/icons-material';\nimport RepeatIcon from '@mui/icons-material/Repeat';\n// import { DataGrid, GridColDef, GridValueGetterParams } from '@mui/x-data-grid';\nimport './ResultPage.scss';\n// import { Box, Fab } from '@mui/material';\n// import AddIcon from '@mui/icons-material/Add';\n// import RepeatIcon from '@mui/icons-material/Repeat';\n// import { useNavigate } from 'react-router-dom';\n// import { useSelector } from 'react-redux';\nimport { getAllAnswersSelector } from '../../store/selectors';\nimport { HandlerResults } from './HendlerResults';\nimport { Answer } from '../../react-app-env.d';\n\nexport const ResultPage = () => {\n  const [isShow, setIsShow] = React.useState(false);\n  const [showThisSession, setShowThisSession] = React.useState<Answer[]>([]);\n\n  const navigate = useNavigate();\n  const results = useSelector(getAllAnswersSelector);\n  const lastAnswer = results[results.length - 1];\n\n  return (\n    <>\n      <h1>Результати</h1>\n      <Box sx={{ '& > :not(style)': { m: 1 } }}>\n        <Fab\n          color=\"primary\"\n          aria-label=\"add\"\n          onClick={() => {\n            navigate('/');\n          }}\n        >\n          <AddHome />\n        </Fab>\n      </Box>\n      <HandlerResults\n        lastAnswer={lastAnswer}\n      />\n      <Stack sx={{ width: '100%' }} spacing={2}>\n        <Alert severity=\"info\">{`Активність: Сьогодні здіснено ${results.length} повторень слів`}</Alert>\n      </Stack>\n      <Box sx={{ '& > :not(style)': { m: 1 } }}>\n        <Fab\n          color=\"primary\"\n          aria-label=\"add\"\n          onClick={() => {\n            navigate('/');\n          }}\n        >\n          <AddHome />\n        </Fab>\n        <Fab\n          color=\"primary\"\n          aria-label=\"repeat\"\n          onClick={() => {\n            navigate('/repeat');\n          }}\n        >\n          <RepeatIcon />\n        </Fab>\n      </Box>\n      <Stack spacing={2} direction=\"row\" sx={{ m: 1 }}>\n        {results.map((item, i) => (\n\n          <Button\n            variant=\"outlined\"\n            type=\"button\"\n            // eslint-disable-next-line react/no-array-index-key\n            key={i}\n            onClick={() => {\n              setIsShow(true);\n              setShowThisSession(item);\n            }}\n          >\n            {`Повтторення ${i + 1}`}\n          </Button>\n\n        ))}\n      </Stack>\n      {isShow && <HandlerResults lastAnswer={showThisSession} />}\n    </>\n  );\n};\n","import React from 'react';\nimport { Route, Routes } from 'react-router';\nimport './App.scss';\nimport { MainPage } from './components/MainPage';\nimport { AddWordPage } from './components/AddWordPage';\nimport { RepeatPage } from './components/RepeatPage';\nimport { UnitPage } from './components/RepeatPage/UnitPage';\nimport { ResultPage } from './components/ResultPage';\n\nexport const App:React.FC = () => (\n  <div className=\"App\">\n    <Routes>\n      <Route path=\"/\" element={<MainPage />} />\n      <Route path=\"addword\" element={<AddWordPage />} />\n      <Route path=\"repeat\" element={<RepeatPage />} />\n      <Route path=\"repeat/:unitId\" element={<UnitPage />} />\n      <Route path=\"/result\" element={<ResultPage />} />\n      {/* <Route path=\"*\" element={<PageNotFound />} /> */}\n    </Routes>\n  </div>\n);\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport { Provider } from 'react-redux';\nimport { HashRouter } from 'react-router-dom';\nimport store from './store';\nimport { App } from './App';\n\nReactDOM.render(\n  <Provider store={store}>\n    <HashRouter>\n      <App />\n    </HashRouter>\n    ,\n  </Provider>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}